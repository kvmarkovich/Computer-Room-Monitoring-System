<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ouc.dcrms.core.dao.SensorDao" >
  <resultMap id="BaseResultMap" type="Sensor" >
    <id column="sensorId" property="sensorid" jdbcType="INTEGER" />
    <result column="insId" property="insid" jdbcType="INTEGER" />
    <result column="coordinateId" property="coordinateid" jdbcType="INTEGER" />
    <result column="sensorName" property="sensorname" jdbcType="CHAR" />
    <result column="unit" property="unit" jdbcType="CHAR" />
    <result column="accuracy" property="accuracy" jdbcType="REAL" />
    <result column="upperLimit" property="upperlimit" jdbcType="REAL" />
    <result column="lowerLimit" property="lowerlimit" jdbcType="REAL" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="state" property="state" jdbcType="TINYINT" />
    <result column="visible" property="visible" jdbcType="TINYINT" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    sensorId, insId, coordinateId, sensorName, unit, accuracy, upperLimit, lowerLimit, 
    type, state, visible
  </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sensor
    where sensorId = #{sensorid,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sensor
    where sensorId = #{sensorid,jdbcType=INTEGER}
  </delete>
  
  <insert id="insert" parameterType="Sensor" >
    insert into sensor (sensorId, insId, coordinateId, 
      sensorName, unit, accuracy, 
      upperLimit, lowerLimit, type, 
      state, visible)
    values (#{sensorid,jdbcType=INTEGER}, #{insid,jdbcType=INTEGER}, #{coordinateid,jdbcType=INTEGER}, 
      #{sensorname,jdbcType=CHAR}, #{unit,jdbcType=CHAR}, #{accuracy,jdbcType=REAL}, 
      #{upperlimit,jdbcType=REAL}, #{lowerlimit,jdbcType=REAL}, #{type,jdbcType=TINYINT}, 
      #{state,jdbcType=TINYINT}, #{visible,jdbcType=TINYINT})
  </insert>
  
  <insert id="insertSelective" parameterType="Sensor" >
    insert into sensor
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="sensorid != null" >
        sensorId,
      </if>
      <if test="insid != null" >
        insId,
      </if>
      <if test="coordinateid != null" >
        coordinateId,
      </if>
      <if test="sensorname != null" >
        sensorName,
      </if>
      <if test="unit != null" >
        unit,
      </if>
      <if test="accuracy != null" >
        accuracy,
      </if>
      <if test="upperlimit != null" >
        upperLimit,
      </if>
      <if test="lowerlimit != null" >
        lowerLimit,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="visible != null" >
        visible,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="sensorid != null" >
        #{sensorid,jdbcType=INTEGER},
      </if>
      <if test="insid != null" >
        #{insid,jdbcType=INTEGER},
      </if>
      <if test="coordinateid != null" >
        #{coordinateid,jdbcType=INTEGER},
      </if>
      <if test="sensorname != null" >
        #{sensorname,jdbcType=CHAR},
      </if>
      <if test="unit != null" >
        #{unit,jdbcType=CHAR},
      </if>
      <if test="accuracy != null" >
        #{accuracy,jdbcType=REAL},
      </if>
      <if test="upperlimit != null" >
        #{upperlimit,jdbcType=REAL},
      </if>
      <if test="lowerlimit != null" >
        #{lowerlimit,jdbcType=REAL},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="state != null" >
        #{state,jdbcType=TINYINT},
      </if>
      <if test="visible != null" >
        #{visible,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="Sensor" >
    update sensor
    <set >
      <if test="insid != null" >
        insId = #{insid,jdbcType=INTEGER},
      </if>
      <if test="coordinateid != null" >
        coordinateId = #{coordinateid,jdbcType=INTEGER},
      </if>
      <if test="sensorname != null" >
        sensorName = #{sensorname,jdbcType=CHAR},
      </if>
      <if test="unit != null" >
        unit = #{unit,jdbcType=CHAR},
      </if>
      <if test="accuracy != null" >
        accuracy = #{accuracy,jdbcType=REAL},
      </if>
      <if test="upperlimit != null" >
        upperLimit = #{upperlimit,jdbcType=REAL},
      </if>
      <if test="lowerlimit != null" >
        lowerLimit = #{lowerlimit,jdbcType=REAL},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="visible != null" >
        visible = #{visible,jdbcType=TINYINT},
      </if>
    </set>
    where sensorId = #{sensorid,jdbcType=INTEGER}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="Sensor" >
    update sensor
    set insId = #{insid,jdbcType=INTEGER},
      coordinateId = #{coordinateid,jdbcType=INTEGER},
      sensorName = #{sensorname,jdbcType=CHAR},
      unit = #{unit,jdbcType=CHAR},
      accuracy = #{accuracy,jdbcType=REAL},
      upperLimit = #{upperlimit,jdbcType=REAL},
      lowerLimit = #{lowerlimit,jdbcType=REAL},
      type = #{type,jdbcType=TINYINT},
      state = #{state,jdbcType=TINYINT},
      visible = #{visible,jdbcType=TINYINT}
    where sensorId = #{sensorid,jdbcType=INTEGER}
  </update>
</mapper>